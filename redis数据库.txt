1. Redis 是什么？
  1. 开源
  2. 基于键值的存储服务系统
  3. 多种数据结构
  4. 高性能、功能丰富
2. redis特性
  1. 速度快
    10W OPS
    数据存在内存中
    c语言编写
    线程模型：单线程
  2. 持久化
    redis所有数据保持在内存中， 对数据的更新将异步保存到磁盘上
  3. 多种数据结构
    字符串，Hash，列表，集合，有序集合
    BitMaps : 位图
    HyperLogLog : 超小内存唯一值计数
    GEO : 地理信息定位
  4. 支持多种编程语言  
  5. 功能丰富
  6. 简单
  7. 主从复制
  8. 高可用、分布式
3. Redis典型应用场景
  1. 系统缓存
    APP Server
  2. 计数器
  3. 消息队列系统
  4. 排行榜
  5. 社交网络
  6. 实时系统
4. Redis 安装
  Redis安装（Linux）
  1.wget http://download.redis.io/releases/redis-3.0.7.tar.gz  
  2.tar -zxvf redis-3.0.7.tar.gz
  3.ln -s redis-3.0.7 redis
  4.make && make install
  Redis可执行文件说明
  redis-server       Redis服务器
  redis-cli          Redis命令行服务端
  redis-benchmark    Redis性能测试工具
  redis-check-aof    AOF文件修复工具
  redis-check-dump   RDB文件检测工具
  redis-sentinel     Sentinel服务器（2.8以后）
  Redis安装（windows）
5. 三种启动方法
  1.最简启动Redis
    redis-server
    验证方式：ps -ef | grep redis
             netstat -antp | grep redis
             redis-cli -h ip -p port ping
  2.动态参数启动
    redis-server --port 6380(默认端口6379)
  3.配置文件启动 
    redis-server configPath
  三种方式比较：
    * 生成环境选择配置启动
    * 单机多实例配置文件可以用端口区分开
6. Redis客户端的连接    
    #连接本地
    redis-cli
    #连接远程，加上Ip和密码参数。
    redis-cli -h 127.0.0.1 -p 端口号（默认6379） -a "password"
7. Redis客户端返回值
    状态回复     
    127.0.0.1:6379> ping
    PONG
    127.0.0.1:6379> set hello world
    OK
    
    错误回复
    127.0.0.1:6379> hget hello field
    (error) WRONGTYPE Operation against a key holding the wrong kind of value
    整数回复
    127.0.0.1:6379> incr hello
    (integer) 1
    字符串回复
    127.0.0.1:6379> get hello
    "world"
    多行字符串回复
    127.0.0.1:6379> mget hello foo
    1) "world"
    2) (nil)
8. Redis常用配置
    daemonize  是否是守护进程（no|yes） 默认配置是no，建议使用yes
    port       Redis对外端口号
    logfile    Redis系统日志
    dir        Redis工作目录     
9. Redis  API的使用和理解
  1. 通用命令
    1. keys
      keys * 
      遍历所有key
      keys[pattern]
      遍历所有key
    2. dbsize
      计算key的总数
    3. exists key
      检查key是否存在，存在返回1，不存在返回0
    4. del key[key ...]
      删除指定的key-value(键值对)
    5. expire key seconds
      key在seconds秒后过期
       pexpire key millisecond
      key在millisecond毫秒后过期
    6. ttl key
      查看key剩余的过期时间
      示例：
      127.0.0.1:6379> set hello world
      OK
      127.0.0.1:6379> expire hello 60
      (integer) 1
      127.0.0.1:6379> ttl hello
      (integer) 52
      127.0.0.1:6379> get hello
      "world"
      127.0.0.1:6379> get hello
      (nil)     # 60秒之后过期
      127.0.0.1:6379> ttl hello
      (integer) -2  返回-2,表示键值对已经删除
    7. persist key 
      去掉key的过期时间
      示例：
      127.0.0.1:6379> set hello world
      OK
      127.0.0.1:6379> expire hello 30
      (integer) 1
      127.0.0.1:6379> ttl hello
      (integer) 23
      127.0.0.1:6379> persist hello
      (integer) 1
      127.0.0.1:6379> ttl hello
      (integer) -1  返回-1，代表key存在，并且没有过期时间 
    6. type key
      返回key的类型
      string（字符串） hash(哈希) list(列表) set(集合) zset(有序集合) 
      none
    7. 命令的时间复杂度
      命令      时间复杂度
      key        O(n)
      dbsize     O(1)
      del        O(1)
      exists     O(1)
      expire     O(1)
      type       O(1)      
  2. 数据结构和内部编码
  3. 单线程架构
      redis在同一时间只会执行一条命令
      单线程为什么这么快？
        1. 纯内存
        2. 非阻塞IO
        3. 避免线程切换和竞态消耗
      注意：
      1. 一次只运行一条命令
      2. 拒绝长（慢）命令
          keys,fullshall,flushdb,show lua scrip
          multi/exec,operate,big value(collection
      3. 其实不是单线程
          fysnc file descriptor
          close file descriptor
          这其中是有单独的线程进行的     
10.redis的数据结构
  1.字符串
    1.字符串键值结构
    key       value
    hello      world
    counter    1
    bits       10111101
    2.使用场景
      1. 缓存
      2. 计数器
      3. 分布式锁
      ...
    3.命令
      1. get key #获取对应的value
      2. set key value #设置key-value
      3. del key  #删除key-value
      4. incr key 
        # key自增1，如果key不存在，自增后get(key)=1
          示例：
            127.0.0.1:6379> get count
            (nil)
            127.0.0.1:6379> incr count
            (integer) 1
            127.0.0.1:6379> get count
            "1"
      5. decr key
        # key自减1，如果key不存在，自减后get(key)=-1 .
      6. incrby key k
        # key自增k,如果key不存在，自增后get(key)=k
          示例：
            127.0.0.1:6379> incrby count 5
            (integer) 5
            127.0.0.1:6379> get count
            "5"
      7. decrby key k  
        # key自减k,如果key不存在，自减后get(key)=-k
      实战：
         1.记录网站每个用户个人主页的访问量
          incr userid:pageview (单线程，无竞争)
      8. set key value
        # 不管key是否存在，都设置
      9. setnx key value
        # key不存在，才设置
      10. set key value xx
        # key存在，才设置        
          示例：
            127.0.0.1:6379> set python good
            OK
            127.0.0.1:6379> setnx python bad
            (integer) 0
            127.0.0.1:6379> set python best xx
            OK
            127.0.0.1:6379> get python
            "best"
      11. mget key1 key2 key3   O(n)
        # 批量获取key,原子操作
      12. mset key1 value1 key2 value2 key3 value3
        # 批量设置key-value     O(n)
      13. getset key newvalue
        # 设置新的value并返回旧的value
      14. append key value
        # 将value追加到旧的value
      15. strlen key
        # 返回字符串的长度（注意中文）    
          示例：
            127.0.0.1:6379> set hello world
            OK
            127.0.0.1:6379> getset hello python
            "world"
            127.0.0.1:6379> append hello good
            (integer) 10
            127.0.0.1:6379> get hello
            "pythongood"
            127.0.0.1:6379> strlen hello
            (integer) 10
      16. incrbyfloat key 3.5
        # 增加key对应的值3.5
          示例：
            127.0.0.1:6379> incr count
            (integer) 1
            127.0.0.1:6379> incrbyfloat count 1.1
            "2.1"
      17. getrange key start end
        #获取字符串指定下标所有的值
          示例：
            127.0.0.1:6379> set hello python
            OK
            127.0.0.1:6379> getrange hello 0 2
            "pyt"
      18. setrange key index value
        #设置指定下标所有对应的值
          示例：
            127.0.0.1:6379> setrange hello 0 w
            (integer) 6
            127.0.0.1:6379> get hello
            "wython"
  2.哈希
    key   field   value 
    键     属性     值
    field不能相同，value可以相同
    1. 常用API（哈希命令都是H开头）
      1.hget key field             
        获取hash key对应的field的value
      2.hset key value
        设置hash key对应的field的value
      3.hdel key value 
        删除hash key对应的field的value
      4.hexists key field
        判断hash key是否有field
      5.hlen key
        获取hash key field的数量(返回属性的数量)
      6.hmget key field1 field2 ...fieldN  （O(n)）
        批量获取hash key的一批field对应的值
      7.hmset key field1 value1 field2 value2...fieldN valueN   
        批量设置hash key的一批field value
        例 ：
          127.0.0.1:6379> hmset user2 age 30 name Jerry  
          OK
          127.0.0.1:6379> hmget user2 age name
          1) "30"
          2) "Jerry"
      8.hgetall key      (O(n))  
        返回hash key对应所有的field和value
      9.hvals key        (O(n))
        返回hash key对应所有filed的value
      10.hkeys key       (O(n))
        返回hash key对应所有的field 
          例：
            127.0.0.1:6379> hmset user name Jerry age 20 score 100
            OK
            127.0.0.1:6379> hgetall user
            1) "age"
            2) "20"
            3) "name"
            4) "Jerry"
            5) "score"
            6) "100"
            127.0.0.1:6379> hvals user
            1) "20"
            2) "Jerry"
            3) "100"
            127.0.0.1:6379> hkeys user
            1) "age"
            2) "name"
            3) "score"
    2. 查漏补缺
      1. hsetnx key field value 
         设置hash key对应field的value(如field已经存在，则失败)
      2. hincrby key field intCounter
         hash key 对应的field的value自增intCounter
      3. hincrbyfloat key field floatCounter
         hincrby浮点数版
  3.列表
    1. 常用API
      1.rpush key value1 value2 ... valueN    O（1~N）
       从列表右端插入值（1-N个）
      2.lpush key value1 value2 ... valueN
       从列表左端插入值（1~N个）
      3.linsert key before|after value newValue  O(n)
       在list指定的值前|后插入newValue              
      4.lpop key 
       从列表左侧弹出一个item
      5.rpop key 
       从列表右侧弹出一个item
      6.lrem key count value   O(N)
       根据count值，从列表中删除所有value相等的项
       1.count>0,从左到右，删除最多count个value相等的项
       2.count<0,从右到左，删除最多Math.abs(count)个value相等的项
       3.count=0，删除所有的value相等的项 
      7.ltrim key start end    O(N)
       按照索引范围修剪列表
        例： 
          a b c d e f 
          0 1 2 3 4 5 
          ltrim listkey 1 4 
          列表修改为： b c d e      
      8.lrange key start end (包含end)    O(N)
       获取列表指定索引范围所有item    
        例：
          a b c d e f 
          0 1 2 3 4 5
          lrange listkey 1 4 
          返回 b c d e 
      9.lindex key index      O(N)
       获取列表指定索引的item
        例：
          a b c d e f 
          0 1 2 3 4 5
          lindex listkey 1  
          返回 b
      10.llen            
       获取列表长度
      11.lset key index newValue  O(N)
        例：
          a b c d e f 
          0 1 2 3 4 5
          lset listkey 1 B  
          列表修改为 a B c d e f 
    2.查缺补漏
      1.blpop key timeout 
        lpop阻塞版本，timeout是阻塞超时时间，timeout=0为永远不阻塞
      2.brpop key timeout 
        rpop阻塞版本，timeout是阻塞超时时间，timeout=0为永远不阻塞
    3.不同场景使用技巧
      1. lpush + lpop = Stack 实现栈的功能
      2. lpush + rpop = queue 实现队列的功能
      3. lpush + ltrim = Capped collection 有固定数量的列表
      4. lpush + brpop = Message queue 消息队列
  4.集合
      数据库中创建集合
      127.0.0.1:6379> sadd user:hobby  music his ball dance
      (integer) 4
    1.常用API 
      1.sadd key element
        向集合key添加element(如果element已经存在，添加失败)
      2.srem key element
        将集合key中的element移除掉
      3.scard 
        计算集合大小
          127.0.0.1:6379> scard user:hobby
          (integer) 4
      4.sismember 
        判断集合中的某个元素是否存在
          127.0.0.1:6379> sismember user:hobby dance
          (integer) 1
          127.0.0.1:6379> sismember user:hobby it
          (integer) 0
      5.srandmember key:set count
        从集合中随机挑count个元素
          127.0.0.1:6379> srandmember user:hobby 2
          1) "music"
          2) "his"
          127.0.0.1:6379> srandmember user:hobby 1
          1) "music"
          127.0.0.1:6379> srandmember user:hobby 3
          1) "music"
          2) "ball"
          3) "dance"
      6.spop key:set 
        从集合中随机弹出一个元素（删除），返回被删除的元素
          127.0.0.1:6379> spop user:hobby 
          "dance"
          127.0.0.1:6379> smembers user:hobby
          1) "his"
          2) "music"
          3) "ball"
      7.smembers
        获取集合中所有的元素（小心使用，redis单线程）
    2.实战
      1. 给用户添加标签
        sadd user1:tags tag1 tag2 tag3
        sadd user2:tags tag1 tag3 tag4
        ...
      2. 给标签添加用户
        sadd tag1:users user1 user2
        sadd tag2:users user3 user4
        ...
    3.集合之间API
        127.0.0.1:6379> sadd user1:hobby ball dance sing
        (integer) 3
        127.0.0.1:6379> sadd user2:hobby dance sing IT
        (integer) 3
      1.交集 sinter
          127.0.0.1:6379> sinter user1:hobby user2:hobby 
          1) "sing"
          2) "dance"
      2.并集 sunion
          127.0.0.1:6379> sunion user1:hobby user2:hobby 
          1) "IT"
          2) "dance"
          3) "sing"
          4) "ball"
      3.补集 sdiff 
          127.0.0.1:6379> sdiff user1:hobby user2:hobby 
          1) "ball" 
    4. 集合简单使用
      sadd = Tagging 做一些标签
      spop/srandmember = Random item 做一些随机数相关的场景
      sadd sinter = social graph 做一些社交相关的应用      
  5.有序集合
    集合        有序集合              列表           有序集合
    无重复元素   无重复元素           可以有重复元素   无重复元素  
    无序         有序                有序             有序        
    element     element + score     element         element + score
    1.重要API
      1.zadd key score element(可以是多对)  o(log(N))
        添加score 和 element
      2.zrem key element(可以是多个)
        删除元素
      3.zscore key element
        返回元素的分数
      4.zincrby key increScore element
        增加或减少元素的分数
      5.zcard key 
        返回元素的总个数
      6.zrange key start end [WITHSCORES]         o(log(n)+m)
        返回指定索引范围内的升序元素（按照score升序显示） [WITHSCORES]是否返回对应的score;
      例子 ： 
        127.0.0.1:6379> zadd player:rank 100 tom 99 susan 60 jerry 80 linda
        (integer) 4
        127.0.0.1:6379> zscore player:rank linda
        "80"
        127.0.0.1:6379> zcard player:rank
        (integer) 4
        127.0.0.1:6379> zrem player:rank tom
        (integer) 1
        127.0.0.1:6379> zrange player:rank 1 0 
        (empty list or set)
        127.0.0.1:6379> zrange player:rank 0 -1 withscores 
        1) "jerry"
        2) "60"
        3) "linda"
        4) "80"
        5) "susan"
        6) "99"
        127.0.0.1:6379> zrange player:rank 0 -1 
        1) "jerry"
        2) "linda"
        3) "susan"
      7.zrangebyscore key minScore maxScore [WITHSCORES]             o(log(n)+m)
        返回指定分数范围内的升序元素[分值]
        例 ： 获取score在50到90之间的element及对应的score
          127.0.0.1:6379> zrangebyscore player:rank 50 90 withscores
          1) "jerry"
          2) "60"
          3) "linda"
          4) "80"
      8.zcount key minScore maxScore                   o(log(n)+m)
        返回集合内在指定分数范围内的个数 
        例 ： 
          127.0.0.1:6379> zcount player:rank 50 90 
          (integer) 2
      9.zremrangebyrank key start end                      o(log(n)+m)
        删除指定排名内的升序元素
        例 ： 删除2~3名的元素
          127.0.0.1:6379> zrange player:rank 0 -1 withscores
          1) "jerry"
          2) "60"
          3) "linda"
          4) "80"
          5) "susan"
          6) "99"
          7) "tom"
          8) "100"
          127.0.0.1:6379> zremrangebyrank player:rank 1 2
          (integer) 2
          127.0.0.1:6379> zrange player:rank 0 -1 withscores
          1) "jerry"
          2) "60"
          3) "tom"
          4) "100"
          127.0.0.1:6379>
      10.zremrangebyscore key minScore maxScore     o(log(n)+m)
         删除指定分数内的升序元素
         例 ： 删除score在 50 ~ 90之间的元素  
          127.0.0.1:6379> zremrangebyscore player:rank 50 90
          (integer) 2
          127.0.0.1:6379> zrange player:rank 0 -1 withscores
          1) "susan"
          2) "99"
          3) "tom"
          4) "100"
    2.实战：排行榜
    3.API查缺补漏
      1.zrevrank  key element            O(log(N))
        按照score的值排名（从高到低）是第几名
        排名以 0 为底，也就是说， score 值最大的成员排名为 0 
        例子 ： linda排名第几
          127.0.0.1:6379> zrevrank player:rank linda
          (integer) 2
      2.zrevrange key start end [WITHSCORES]
        返回指定索引范围内的升序元素（按照score降序显示） [WITHSCORES]是否返回对应的score;
        例子：
          127.0.0.1:6379> zrevrange player:rank 0 -1 withscores
          1) "tom"
          2) "100"
          3) "susan"
          4) "99"
          5) "linda"
          6) "80"
          7) "jerry"
          8) "60"
      3.zrevrangebyscore key maxScore minScore [WITHSCORES]             o(log(n)+m)
        返回指定分数范围内的降序元素[分值]
        例子 ： 
          127.0.0.1:6379> zrevrangebyscore player:rank 90 50 withscores
          1) "linda"
          2) "80"
          3) "jerry"
          4) "60"
      4.zinterstore
        交集
      5.zunionstore
        并集

11.python客户端：redis-pybb
  1.安装方法：
    1.pip install redis 
    2.easy_install redis 
    3.源码安装
      wget https://github.com/andymccurdy/redis-py/archive/2.10.5.zip
      unzip redis-2.10.5.zip
      cd redis-2.10.5
      安装redis-py
      sudo python setup.py install 
  2.简单使用
    import redis
    client = redis.StrictRedis(host="127.0.0.1",port=6379)
    运用client实现redis语句
    例：
      key = "hello"
      setResult = client.set(key,"python-redis")
      print setResult  
  3.连接池
    为了节省资源，减少多次连接损耗，连接池的作用相当于总揽多个客户端与服务端的连接
    当新客户端需要连接时，只需要到连接池获取一个连接即可，实际上只是一个连接共享给
    多个客户端
    例：
      import redis
      pool = redis.ConnectionPool(host="127.0.0.1",port="6379",decode_responses=True)
      r1 = redis.StrictRedis(connection_pool=pool)  
      r2 = redis.StrictRedis(connection_pool=pool)  
    
12.Redis瑞士军刀
  1.慢查询
    1. 慢查询 
      1. 生命周期
        客户端给服务端发送请求，并返回结果的的过程
          发送命令 -> 排队 -> 执行命令 -> 返回结果  
      2. 说明
        1.慢查询是发生在执行命令的阶段
        2.客户端超时不一定慢查询，但慢查询是客户端超时的一个可能因素
    2. 两个配置
      1. 说明 
          Redis 会把命令执行时间超过 slowlog-log-slower-than 
          的都记录在 Reids 内部的一个列表（list）中，该列表的
          长度最大为 slowlog-max-len 
      2. slowlog-max-len
        1. 先进先出队列
        2. 固定长度
        3. 保存在内存中
      3. slowlog-log-slower-than
        1.慢查询阈值（单位：微秒）
        2. slowlog-log-slower-than = 0 ，记录所有命令
        3. slowlog-log-slower-than < 0 ，不记录任何命令
      4. 配置方法
        1.默认值  
          config get slowlog-max-len = 128
          config get slowlog-log-slower-than = 10000
        2.修改配置文件重启（不建议）
        3.动态配置
          config set slowlog-max-len 1000
          config set slowlog-log-slower-than 1000
    3. 慢查询命令
      1. slower get[n] : 获取慢查询队列
      2. slowlog len : 获取慢查询队列长度
      3. slowlog reset : 清空慢查询队列
    4. 运维经验
      1.slowlog-max-len 不要设置过大，默认10ms,通常设置1ms
      2.slowlog-log-slower-than 不要设置过小，通常设置1000左右
      3.理解命令生命周期
      4.定期持久化慢查询 
  2.pipeline 流水线
    1.什么是流水线
        系统的瓶颈往往是在网络通信中的延时。比如当命令1在T1时刻发送到Redis服务器后，
        服务器很快执行完命令1,而命令2在T2时刻却没有通过网络送达Redis服务器，这样就变成
        了Redis服务器在等待命令2的到来，当命令2到达且被执行后，命令3还没到，又得继续等待
        ，以此类推，这样Redis的等待时间就会很长，很多时候在空闲的状态，而问题出现在网络的
        延迟中，造成了系统的瓶颈。为了解决这个问题，可以使用Redis的流水线
      流水线作用
        命令        N个操作命令      1次pipeline(n个命令)
        时间       n次网络+n次命令      1次网络 + n次命令
        数据量       1条命令              n条命令
      注意：
        1. redis的命令时间是微秒级别
        2. pipeline每次条数要控制(网络)            
    2.客户端实现
    3.与原生操作对比
    4.使用建议
      1.注意每次pipline携带数据量
      2.pipeline每次只能作用在一个redis节点上
      3.M操作与pipeline的区别
  3. 发布订阅
    1. 角色
      1.发布者（publisher）
      2.订阅者(subscriber)
      3.频道（channel）
    2. 模型
       发布者      发布消息    频道
       Redis-cli   ---->     Redis server
                               / | \
                              /  |  \
                        订阅者 订阅者 订阅者
                    redis-cli redis-cli redis-cli  
    3. API
      1.publish channel message
        作用 ： 发布命令
        参数 ： channel 订阅的频道
                message 发送的消息
        返回值 ： 接收到发送的消息的订阅者数量
      2.subscribe [channel] ...一个或多个
        订阅频道
        例： 
          27.0.0.1:6379> subscribe channel1.1
          Reading messages... (press Ctrl-C to quit)
          1) "subscribe"     
          2) "channel1.1"    
          3) (integer) 1
        1.执行subscribe命令后客户端会进入订阅状态，处于此状态下的客户端不能
          使用除subscribe，unsubscribe,psubscribe,punsubscribe  之外的命令
        2.进入订阅状态后客户端可能收到3种类型的回复，每种类型的回复都包含3个值
          三种类型
          (1)subscribe 表示订阅成功的反馈信息，第二个值是订阅成功的频道名称，第三个
                       值是当前客户端订阅的频道数量 
          (2)message   表示接收到的消息，第二个值表示产生消息的频道名称，第三个值是
                       消息的内容         
          (3)unsubscribe  表示成功取消订阅某个频道，第二个值表示对应的频道名称，第三个
                          值是当前客户端订阅的频道数量     
      3.unsubscribe [channel] ...一个或多个
        取消订阅
      补 ： 
      1. psubscribe [pattern...] 订阅模式
      2. punsubscribe [pattern...] 退订指定的模式
      3. pubsub channels  累出至少有一个订阅者的频道
      4. pubsub numsub [channel...] 列出给定频道的订阅者数量
      5. pubsub numpat 列出被订阅模式的数量

    4. 使用流程
      先在redis-cli中订阅频道，再重新开一个客户端，在同一频道发布消息，订阅者就能收到消息      
    5. 发布订阅与消息队列
      发布订阅 ： 发布消息后所有订阅者都可以收到消息
      消息队列 ： 一条消息发布，客户端只有一个能抢到消息
  4. Bitmap 位图 （在某个key的value上直接对某个二进制位操作）
    1. 位图
      Bitmap是一串连续的2进制数字（0或1），每一位所在的位置为
      偏移(offset)，在bitmap上可执行AND,OR,XOR以及其它位操作
      例子： big对应的二进制(用二进制表示字母对应的ASC码)
      0 1 1 0 0 0 1 0   0 1 1 0 1 0 0 1   0 1 1 0 0 1 1 1
             b                 i                 g
    2. 相关命令    
      1.setbit key offset value
        给位图指定索引设置值
        例：
          127.0.0.1:6379> set hello big  #设置key-value
          OK
          127.0.0.1:6379> getbit hello 0 #获取字符串big中b的offset(从0开始)
          (integer) 0
          127.0.0.1:6379> setbit hello 7 1  #将字符串big中offset为7的值设置为1
          (integer) 0                        即更改为 0 1 1 0 0 0 1 1（对应字母c）        
          127.0.0.1:6379> get hello
          "cig"
          127.0.0.1:6379> 
      2. getbit key offset 
        获取位图指定索引的值
      3. bitcount key [start end]
        获取位图指定范围（start到end,单位为字节，如果不指定就是获取全部）
        位值为1的个数
        注 ： [start end]指的是字节的索引值，例如：big中,b对应0，i对应1，g对应2
        例子：  
          127.0.0.1:6379> set hello big
          OK
          127.0.0.1:6379> bitcount hello 
          (integer) 12
      4. bitop op destkey key [key...]
        做多个Bitmap 的and(交集)，or(并集)，not(非)，xor(异或)
        操作并将结果保存在destkey中
        （将多个位图相同偏移量对应的值做and,or,not,xor运算得出的结果
        保存在destkey中）
        and：全1则1；or : 有1则1；not：（例：not：001 = 110） ； xor：相同为0，不同为1
        例子：
          127.0.0.1:6379> set world big
          OK
          127.0.0.1:6379> set world cig
          OK
          127.0.0.1:6379> bitop and destkey hello world
          (integer) 3
          127.0.0.1:6379> get destkey
          "big"
          127.0.0.1:6379> bitop or destkey hello world
          (integer) 3
          127.0.0.1:6379> get destkey
          "cig"
          127.0.0.1:6379> bitop not destkey hello 
          (integer) 3
          127.0.0.1:6379> get destkey
          "\x9d\x96\x98"
          127.0.0.1:6379> bitop xor destkey hello world
          (integer) 3
          127.0.0.1:6379> get destkey
          "\x01\x00\x00"
      5. bitpos key targetBit [start] [end]
        计算位图指定范围（start到end，单位为字节，如果不指定就是获取全部）
        第一个偏移量对应的值等于targetBit的位置（targetBit取0或1）
        例：
          127.0.0.1:6379> bitpos hello 1 0 0
          (integer) 1
          127.0.0.1:6379> bitpos hello 1 1 1
          (integer) 9
    3. 独立用户访问统计
      使用 set 和 Bitmap （前提是用户的ID必须是整型）
      1亿用户，五千万独立
        数据类型	    每个userId占用空间	            需要存储的用户量	    内存使用总量
        set	      32位(假设userId用的是integer)	      50,000,000	     32位*50,000,000=200MB
        Bitmap	           1位	                     100,000,000	    1位*100,000,000=12.5MB
      若只有10万独立用户
        数据类型	    每个userId占用空间	            需要存储的用户量	    内存使用总量
        set	      32位(假设userId用的是整型)	         100,000	        32位*100,000=4MB
        Bitmap	  1位	                               100,000,000	     1位*100,000,000=12.5MB
      使用经验
      string类型最大长度为512M。
      注意setbit时的偏移量，当偏移量很大时，可能会有较大耗时。
      位图不是绝对的好，有时可能更浪费空间。    
  5.  HyperLogLog
    基于HyperLogLog算法： 极小空间完成独立数量统计
    本质还是字符串
    1. 三个命令
      1. pfadd key element [element...] 
        向hyperloglog添加元素
      2. pfcount key [key...] 
        计算hyperloglog的独立总数
      3. pfmerge destkey sourcekey [sourcekey ...]
        合并多个hyperloglog
    2. 使用经验
      1. 是否能容忍错误？
        只需要12K内存，在标准误差0.81%的前提下，能够统计2^64个数据    
      2. 是否需要单条数据
         HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素
         本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素
  6. GEO 地理信息定位 （3.2版本后）
    作用 ： 存储经纬度，计算两地距离，范围计算等
    1.KPI
      1.geoadd key longitude latitude member [longitude latitude member ...]
        将指定的地理空间位置(纬度，经度，名称)添加到指定的key中
      2.geopos key member [menber...]
        获取指定名称的地理位置信息（纬度，经度）
      3.geodist key member1 member2 [unit]
        获取两个地理位置之间的距离
        unit : m(米),km(千米),mi(英里),ft(尺)  
      4.georadius key longitude latitude radius 
        m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]
        命令描述：
        以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
        范围可以使用以下其中一个单位：

        m 表示单位为米。
        km 表示单位为千米。
        mi 表示单位为英里。
        ft 表示单位为英尺。
        在给定以下可选项时， 命令会返回额外的信息：

        WITHDIST: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。 
                  距离的单位和用户给定的范围单位保持一致。
        WITHCOORD: 将位置元素的经度和维度也一并返回。
        WITHHASH: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 
                  这个选项主要用于底层应用或者调试， 实际中的作用并不大。
        命令默认返回未排序的位置元素。 通过以下两个参数， 用户可以指定被返回位置元素的排序方式：

        ASC: 根据中心的位置， 按照从近到远的方式返回位置元素。
        DESC: 根据中心的位置， 按照从远到近的方式返回位置元素。
        在默认情况下， GEORADIUS 命令会返回所有匹配的位置元素。 
              虽然用户可以使用 COUNT <count> 选项去获取前 N 个匹配元素，
              但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，
              即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 
              使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。

        返回值：

        在没有给定任何 WITH 选项的情况下， 命令只会返回一个像 [“New York”,”Milan”,”Paris”] 这样的线性（linear）列表。
        在指定了 WITHCOORD 、 WITHDIST 、 WITHHASH 等选项的情况下， 命令返回一个二层嵌套数组， 内层的每个子数组就表示一个元素。
        在返回嵌套数组时， 子数组的第一个元素总是位置元素的名字。 至于额外的信息， 则会作为子数组的后续元素， 按照以下顺序被返回：

        以浮点数格式返回的中心与位置元素之间的距离， 单位与用户指定范围时的单位一致。
        geohash 整数。
        由两个元素组成的坐标，分别为经度和纬度。  
    2. 说明
      type geokey = zset

13. 事务
  1. 事务同命令一样都是redis的最小执行单位
    事务的原理是先将属于一个事务的命令发给redis,然后让Redis依次执行这些命令
    例 ： 
      127.0.0.1:6379> multi
      OK
      127.0.0.1:6379> sadd "user:1:following" 2
      QUEUED
      127.0.0.1:6379> sadd "user:2:following" 1
      QUEUED
      127.0.0.1:6379> exec
      1) (integer) 1
      2) (integer) 1
    使用multi命令，让接下来的命令存于事务队列中，用exec命令将命令依次执行
  2. 错误处理
    1. 语法错误 ： 命令不存在或者命令参数的个数不对
      使用multi命令后，若接下来的命令中出现语法错误，在输入exec命令后，所有的命令都不会
      执行，包括输入正确的命令
      例：
        127.0.0.1:6379> multi
        OK
        127.0.0.1:6379> set key value
        QUEUED
        127.0.0.1:6379> set key
        (error) ERR wrong number of arguments for 'set' command
        127.0.0.1:6379> exec
        (error) EXECABORT Transaction discarded because of previous errors.
        127.0.0.1:6379> 
      注意 ： 在redis 2.6.5 之前的版本会忽略语法错误，执行事务中正确的命令
          以以上为例，set key value 会被执行，exec命令会返回一个结果：1) OK
    2. 运行错误 ： 命令执行时出现的错误，比如使用字符串类型的命令操作集合类型的键
      使用multi命令后，若接下来的命令中出现运行错误，在输入exec命令后，事务中其他命令
      会继续执行
      例：
      127.0.0.1:6379> set key 1
      QUEUED
      127.0.0.1:6379> sadd key 2
      QUEUED
      127.0.0.1:6379> set key 3
      QUEUED
      127.0.0.1:6379> exec
      1) OK
      2) (error) WRONGTYPE Operation against a key holding the wrong kind of value
      3) OK
  3. watch命令介绍
    事务回滚是指一个事务已经完成对数据库的修改操作撤销
    watch命令可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会
    执行，监控一直持续到exec命令（事务中的命令是在exec之后才执行的，所以在multi命令
    后可以修改watch监控的键值）
    127.0.0.1:6379> set key 1
    OK
    127.0.0.1:6379> watch key
    OK
    127.0.0.1:6379> set key 2
    OK
    127.0.0.1:6379> multi 
    OK
    127.0.0.1:6379> set key 3
    QUEUED
    127.0.0.1:6379> exec 
    (nil)
    127.0.0.1:6379> get key
    "2"
    上例在执行watch命令后，事务执行前修改了key的值，所以最后事务中的命令set key 3
    没有执行，exec命令返回空结果
    注 ： 执行exec命令后会取消对所有键的监控，如果想执行事务中的命令也可以使用
          unwatch命令来取消监控

14. 过期时间
  1. 命令介绍
    见9中过期时间基础API
  2. 实现访问频率限制之一
    要求 ： 限制每分钟每个用户最多只能访问10个页面
    思路 ： 对每个用户使用一个名为rate.limiting:用户 IP 的字符串类型，每次用户访问
           则使用incr命令递增该键的键值，如果递增后的值是1（第一次访问页面），则同时
           还要设置该键的过期时间为1分钟，这样每次用户访问页面时都读取该键的键值，
           如果超过了10就表明该用户的访问频率超过了限制，需要提示用户稍后访问。该键
           每分钟会被自动删除，所以下一分钟用户的访问次数又会重新计算。
           例 ： 
            isKeyExists = exists rate.limiting:IP 
            if isKeyExists is 1:
                times = incr rate.limiting:IP 
                if times > 10 : 
                    print(访问超出限制，稍后再试)
            else：
                multi
                incr rate.limiting:IP
                expire keyName 60
                exec
  3. 实现访问频率限制之二
    要求：2中代码有问题，如果一个用户在一分钟的第一秒访问了一次博客，在同一分钟的最后一秒
          访问了9次，又在下一分钟的第一秒访问了10次，这样的访问是可以通过现在的访问频率限制
          的，但实际上该用户在2秒内访问了19次博客，这样与每个用户只能访问10的限制差距较大
    思路：我们使用一个列表类型的键来记录他最近10次访问博客的时间。一旦键中的元素超过10个，
          就判断时间的最早元素距离现在的时间是否小于1分钟。
          如果超过，表示用户最近1分钟的访问次数超过了10次
          如果未超，将现在的时间加入到列表中，同时把最早的元素删除
          例：
            listLength = llen rate.limit:IP
            if listLength < 10:
                lpush rate.limit:IP  now() #从左端插入值
            else:
                time = lindex rate.limit:IP -1     
                if now() - time < 60:
                    print(访问超过了限制，请稍后再试)
                else：
                    lpush  rate.limit:IP now()
                    ltrim rate.limit:IP 0,9 
          注 ： 当限制 A 时间内最多访问 B 次时，如果B的数值较大，此方法会占用较多的存储
  4. 实现缓存
    为了提高网站的负载能力，常常需要将一些访问频率较高但是对cpu或IO资源消耗较大的操作
    结果缓存起来，并希望让这些缓存过一段时间自动过期。
    例 ： 在教务网站首页对成绩汇总排名，在首页显示前10名的学生姓名，由于计算过程较消耗资源，
          可以将结果使用一个redis的字符串键缓存起来。
          伪代码：
            rank = get cache:rank
            if not rank
                rank = 计算排名
                multi
                set cache:rank rank 
                expire cache:rank 7200
                exec 
      问题 ： 
        1. 当服务器内存有限时，如果大量地使用缓存键且过期时间设置的过程会导致redis占满内存
        2. 为了防止redis占用内存过大而将缓存键的过期时间设置地太短，可能会导致缓存命中率
           较低并且大量的你村留白
      解决方案 ： 
        修改配置文件的maxmemory参数，限制redis最大可用内存大小（单位是字节），当超出这个限制
        时redis会依据maxmemory-policy参数指定的策略来删除不需要的键直到redis占用的内存小于
        指定内存     
        maxmemory-policy  支持的规则
          规则                               说明
        volatile-lru               使用lru算法删除一个键（只对设置了过期时间的键）             
        allkeys-lru                使用lru算法删除一个键
        volatile-random            随机删除一个键（只对设置了过期时间的键） 
        volatile-ttl               删除过期时间最近的一个键
        noeviction                 不删除键，只返回错误
      注 ：  lur 算法即“最近最少使用”，其认为最近最少使用的键在未来一段时间内也不会被
             用到，即当需要空间时这些键是可以被删除的。
             当maxmemory-policy设置为allkeys-lru ，一旦redis占用的内存超过了限制值，
             redis会不断删除数据库中最近最少使用的键，直到占用的内存小于限制值

15. 排序
    1. 有序集合的集合操作
      有序集合的常见应用场景时大数据排序，如游戏的玩家排行榜，很少会需要获取键中的全部
      数据。
      问题 ： 现在需要直接获得集合运算的结果
      解决 ： 使用multi,zinterstore,zrange,del,exec命令实现
          multi 
          zinterstore tempkey ...
          zrange tempkey .... 
          del  tempkey
          exec
    2. sort命令
      sort命令可以对列表类型，集合类型和有序集合类型键进行排序，并且可以完成与关系型数据
      库中连接查询相类似的任务
      例1： 列表的数字排序 （数字排序默认升序排序）
        127.0.0.1:6379> lpush mylist 4 2 6 1 3 7
        (integer) 6
        127.0.0.1:6379> sort mylist
        1) "1"
        2) "2"
        3) "3"
        4) "4"
        5) "6"
        6) "7"
      例2： 有序集合数字排序（有序集合排序时会忽略元素的分数，只对元素自身的值进行排序）
        127.0.0.1:6379> zadd myset 50 2 40 3 20 1 60 5
        (integer) 4
        127.0.0.1:6379> sort myset
        1) "1"
        2) "2"
        3) "3"
        4) "5"
      例3： 利用alpha参数实现字符串元素排序
        127.0.0.1:6379> lpush mylistalpha ball targe cat dog 
        (integer) 4
        127.0.0.1:6379> sort mylistalpha alpha
        1) "ball"
        2) "cat"
        3) "dog"
        4) "targe"
      例4： 利用desc参数实现元素从大到小排序
        127.0.0.1:6379> sort mylist desc
        1) "7"
        2) "6"
        3) "4"
        4) "3"
        5) "2"
        6) "1"
      例5： 利用limit参数来返回指定范围的结果
            语法 ： limit offset count (跳过前offset个元素并获取之后的count个元素)
        127.0.0.1:6379> sort mylist desc limit 1 3
        1) "6"
        2) "4"
        3) "3"
    3. by参数
      语法 ： by 参考键 
      其中参考键可以是字符串类型键或者是hash类型键的某个字段(表示为键名->字段名)。
      如果提供了by参数，sort命令将不再依据元素自身的值进行排序，而是对每个元素使用
      元素的值替换参考键中的第一个"*"，并获取其值，然后依据该值对元素排序。
        127.0.0.1:6379> lpush sortbylist 2 1 3
        (integer) 3
        127.0.0.1:6379> set itemscore:1 50
        OK
        127.0.0.1:6379> set itemscore:2 100
        OK
        127.0.0.1:6379> set itemscore:3 10
        OK
        127.0.0.1:6379> sort sortbylist by itemscore:* desc
        1) "2"
        2) "1"
        3) "3"
      注： 当参考键不包含“*”时（即常量键名，与元素值无关），sort命令将不会执行排序
          操作
      当几个元素的参考键  对应的值相同时，用sort命令会再比较元素本身的值再决定元素的
      排序。
      例：
        127.0.0.1:6379> lpush sortbylist 4
        (integer) 4
        127.0.0.1:6379> set itemscore:4 50
        OK
        127.0.0.1:6379> sort sortbylist by itemscore:* desc
        1) "2"
        2) "4"
        3) "1"
        4) "3"
      元素"4" 与 "1" 对应的参考键的值相同，会比较元素"4"和"1"本身的大小，再按规则排序
      当某个元素的参考键不存在时，会默认参考键的值为0  
        127.0.0.1:6379> lpush sortbylist 5
        (integer) 5
        127.0.0.1:6379> sort sortbylist by itemscore:* desc
        1) "2"
        2) "4"
        3) "1"
        4) "3"
        5) "5"
      参考键是hash类型键的情况
        127.0.0.1:6379> hset studentID:1  score 100
        (integer) 1
        127.0.0.1:6379> hset studentID:2  score 80
        (integer) 1
        127.0.0.1:6379> hset studentID:3  score 90
        (integer) 1
        127.0.0.1:6379> hset studentID:4  score 99
        (integer) 1
        127.0.0.1:6379> sort sortbylist by studentID:*->score
        1) "5"
        2) "2"
        3) "3"
        4) "4"
        5) "1"
    4. get参数
      作用 ： 不影响排序， 使sort命令的返回结果不再是元素自身的值，而是get参数中
            指定的键值。
      使用 ： get参数也支持字符串类型和散列类型的键，并使用"*"作为占位符 

      例1 ：
        sort sortbylist by studentID:*->score get studentID:*->score
        1) (nil)
        2) "80"
        3) "90"
        4) "99"
        5) "100"
      例2 ： 一个sort函数中可以由多个get参数
        127.0.0.1:6379> hset studentID:1 age 23
        (integer) 1
        127.0.0.1:6379> hset studentID:2 age 18
        (integer) 1
        127.0.0.1:6379> hset studentID:3 age 25
        (integer) 1
        127.0.0.1:6379> hset studentID:4 age 22
        (integer) 1
        127.0.0.1:6379> hset studentID:5 age 20
        (integer) 1
        127.0.0.1:6379> sort sortbylist by studentID:*->score get studentID:*->score 
                        get studentID:*->age
        1) (nil)
        2) "20"
        3) "80"
        4) "18"
        5) "90"
        6) "25"
        7) "99"
        8) "22"
        9) "100"
        10) "23"
      例3 :  get # 返回元素本身
        127.0.0.1:6379> sort sortbylist by studentID:*->score get studentID:*->score 
                        get studentID:*->age get #
        1) (nil)
        2) "20"
        3) "5"
        4) "80"
        5) "18"
        6) "2"
        7) "90"
        8) "25"
        9) "3"
        10) "99"
        11) "22"
        12) "4"
        13) "100"
        14) "23"
        15) "1"
    5. store 参数
      默认情况下sort会直接返回排序结果，如果希望保存排序结果，可以使用store参数，
      把结果保存到sort.result键中。保存后的键为列表类型。
        127.0.0.1:6379> sort sortbylist by studentID:*->score get studentID:*->score get studentID:*->age get # store sort.result
        (integer) 15
        127.0.0.1:6379> lrange sort.result 0 -1
        1) ""
        2) "20"
        3) "5"
        4) "80"
        5) "18"
        6) "2"
        7) "90"
        8) "25"
        9) "3"
        10) "99"
        11) "22"
        12) "4"
        13) "100"
        14) "23"
        15) "1"
    注意 ：       sort 时间复杂度： O(n+mlog(m))
      1. 尽可能减少待排序键中元素的数量（使N尽可能小）
      2. 使用limit参数只获取需要的数据（使M尽可能小）
      3. 如果要排序的数据量较大， 尽可能使用store参数将结果缓存
16. 消息通知
  1. 任务队列
    传递任务的队列.与任务队列进行交互的实体有两类,一类是生产者,一类是消费者.
    生产者将需要处理的任务放入任务队列中,二消费者不断从任务队列中读入任务
    信息并执行
    优点 ： 
      1. 松耦合
        生产者和消费者无需知道彼此的实现细节，只需要约定好任务的描述格式。
      2. 易于拓展
        消费者可以有多个，而且可以分布在不同的服务器中  
                            /  消费者A
        生产者-----> 任务队列 - 消费者B
                            \  消费者C
  2. 使用redis实现任务队列
    让生产者将任务使用lpush命令加入到某个键中，让消费者不断使用rpop命令从该键中取出
    任务 
    伪代码 ： 
      loop 
          task = rpop queue 
          if task:
              如果任务队列中有任务则执行它
              execute(task)
          else : 
              如果没有则等待1秒以免过于频繁地请求数据
              wait 1 second 
    缺点 ： 当任务队列中没有任务时消费者每秒都会调用一次rpop命令查看是否有新任务
    解决 ： 借助 brpop命令实现
            brpop 命令和 rpop 命令相似，区别在于当列表中咩有元素时rpop命令会一直
            阻塞住连接，直到有新元素加入。
    修改 ： 
      loop 
          如果任务队列中没有新任务，brpop命令会一直阻塞，不会执行execute()
          task = brpop queue，0
          返回值是一个数组，数组第二个元素是我们需要的任务                          
          execute(task[1])
      brpop命令接收两个参数，第一个是键名，第二个是超过时间，单位是秒。当超过了此
      时间仍然没有获得新元素的话就会返回nil。
      例 ： 
        redis A> brpop queue 0
        输入回车后实例1会处于阻塞状态
        redis B> lpush queue task
        (integer) 1
        在lpush命令执行后实例A马上就返回了结果：
        redis A> brpop queue 0
        1) "queue"
        2) "task"
        (12.37s)
        同时queue中的元素已经被取走
        reids> llen queue 
        (integer) 0
      拓展 ： redis提供了blpop 从队列左边取
  3. 优先级队列
    brpop | blpop命令可以同时接收多个键，命令格式brpop | blpop  key [key...] timeout 
    如： blpop queue:1 queue:2 0 
        同时检测多个键，如果所有键都没有元素则阻塞，如果其中有一个键有元素则会从该键
        中弹出元素。
      redis-cli  客户端1：     
      127.0.0.1:6379> lpush queue:2 task1
      (integer) 1
      127.0.0.1:6379> lpush queue:3 task3
      (integer) 1
      redis-cli  客户端2：
      127.0.0.1:6379> blpop queue:1 queue:2 queue:3 0
      1) "queue:2"
      2) "task1"
      以上示例：如果多个键中都有元素则按照从左到右的顺序取第一个键中的一个元素。
              直到第一个键中的元素取完才会取之后的键。
  4. 发布订阅  
    详见12中3.发布订阅
  5. 管道
    客户端和redis使用TCP协议连接。

14. Reids持久化
  redis所有数据保存在内存中， 对数据的更新将异步保存到磁盘上
  1. 持久化方式
    1. 快照           例：mysql Dump 
                         redis RDB
      就是把系统某个状态下的各种数据记录在一个文件里，
      就如同人照相一样，相片显示的是你那个时间的一个状态。                   
    2. 写日志         例：mysql Binlog
                         Hbase HLog
                         Reids AOF 
      数据库做任何数据的更新，就将其记录在日志当中，需要数据时，读取日志
  2. 持久化之RDB
     redis ------> RDB文件（二进制）
      内存   创建     硬盘
     redis <------ RDB文件（二进制）
      内存  启动载入  硬盘

    触发机制
      1.save(同步)
      2.bgsave(异步)
      3.自动








               


            
  

        


      

    